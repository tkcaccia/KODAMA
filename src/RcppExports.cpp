// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393



#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;


// IRLB
List IRLB(arma::mat& X, int nu, int work, int maxit, double tol, double eps, double svtol);
RcppExport SEXP KODAMA_IRLB(SEXP XSEXP, SEXP nuSEXP, SEXP workSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP epsSEXP, SEXP svtolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type work(workSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type svtol(svtolSEXP);
    rcpp_result_gen = Rcpp::wrap(IRLB(X, nu, work, maxit, tol, eps, svtol));
    return rcpp_result_gen;
END_RCPP
}


// floyd
arma::mat floyd(arma::mat data);
RcppExport SEXP KODAMA_floyd(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    __result = Rcpp::wrap(floyd(data));
    return __result;
END_RCPP
}

// transformy
arma::mat transformy(arma::ivec y);
RcppExport SEXP KODAMA_transformy(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::ivec >::type y(ySEXP);
    __result = Rcpp::wrap(transformy(y));
    return __result;
END_RCPP
}

// PLSDACV
arma::ivec PLSDACV_fastpls(arma::mat x, arma::ivec cl, arma::ivec constrain, int k);
RcppExport SEXP KODAMA_PLSDACV_fastpls(SEXP xSEXP, SEXP clSEXP, SEXP constrainSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type cl(clSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type constrain(constrainSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    __result = Rcpp::wrap(PLSDACV_fastpls(x, cl, constrain, k));
    return __result;
END_RCPP
}
// PLSDACV
arma::ivec PLSDACV_simpls(arma::mat x, arma::ivec cl, arma::ivec constrain, int k);
RcppExport SEXP KODAMA_PLSDACV_simpls(SEXP xSEXP, SEXP clSEXP, SEXP constrainSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type cl(clSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type constrain(constrainSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    __result = Rcpp::wrap(PLSDACV_simpls(x, cl, constrain, k));
    return __result;
END_RCPP
}


// corecpp
List corecpp(arma::mat x, arma::mat xTdata, arma::ivec clbest, const int Tcycle, int FUN, int fparpls, arma::ivec Xconstrain, NumericVector fix, bool shake, int proj);
RcppExport SEXP KODAMA_corecpp(SEXP xSEXP, SEXP xTdataSEXP, SEXP clbestSEXP, SEXP TcycleSEXP, SEXP FUNSEXP, SEXP fparplsSEXP, SEXP XconstrainSEXP, SEXP fixSEXP, SEXP shakeSEXP, SEXP projSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xTdata(xTdataSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type clbest(clbestSEXP);
    Rcpp::traits::input_parameter< const int >::type Tcycle(TcycleSEXP);
    Rcpp::traits::input_parameter< int >::type FUN(FUNSEXP);
    Rcpp::traits::input_parameter< int >::type fparpls(fparplsSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type Xconstrain(XconstrainSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fix(fixSEXP);
    Rcpp::traits::input_parameter< bool >::type shake(shakeSEXP);
    Rcpp::traits::input_parameter< int >::type proj(projSEXP);
    __result = Rcpp::wrap(corecpp(x, xTdata, clbest, Tcycle, FUN, fparpls, Xconstrain, fix, shake, proj));
    return __result;
END_RCPP
}




static const R_CallMethodDef CallEntries[] = {
  {"KODAMA_IRLB", (DL_FUNC) &KODAMA_IRLB, 7},
  {NULL, NULL, 0}
};

RcppExport void R_initKODAMA(DllInfo *dll) {
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}






